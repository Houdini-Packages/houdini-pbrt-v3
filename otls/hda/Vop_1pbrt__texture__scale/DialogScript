# Dialog script for pbrt_texture_scale automatically generated

{
    name	pbrt_texture_scale
    script	scale
    label	"PBRT ScaleTexture"

    rendermask	PBRT
    externalshader 1
    shadertype	generic
    input	float	tex1	"Texture 1"
    input	float	tex2	"Texture 2"
    output	float	output	Output
    inputflags	tex1	0
    inputflags	tex2	0
    signature	Float	default	{ float float float }
    signature	Spectrum	s	{ struct_PBRTSpectrum struct_PBRTSpectrum struct_PBRTSpectrum }

    outputoverrides	default
    {
	___begin	auto
			(0)
    }
    outputoverrides	s
    {
	___begin	auto
			(0)
    }

    help {
	"#type: node"
	"#context: vop"
	"#tags: rman,pattern"
	"#icon: NETWORKS/shop"
	""
	"= pxrhsl ="
	""
	"Adjust the hue, saturation and value of a given input color. Note the output is in RGB color space."
	"@parameters"
	""
	"inputRGB:"
	"The color to have HSL adjustments applied to it."
	""
	"hue:"
	"The amount to shift hue by."
	""
	"saturation:"
	"The amount to scale saturation by."
	""
	"luminance:"
	"The amount to scale luminance by."
	""
    }

    parm {
        name    "signature"
        baseparm
        label   "Signature"
        export  none
    }
    parm {
        name    "tex1"
        label   "Texture 1"
        type    float
        default { "1" }
        help    "These two textures will be multiplied together by the ScaleTexture. "
        range   { 0 1 }
    }
    parm {
        name    "tex1_s"
        label   "Texture 1"
        type    color
        size    3
        default { "1" "1" "1" }
        help    "The constant value of this texture. "
        range   { 0 1 }
    }
    parm {
        name    "tex2"
        label   "Texture 2"
        type    float
        default { "1" }
        help    "These two textures will be multiplied together by the ScaleTexture. "
        range   { 0 1 }
    }
    parm {
        name    "tex2_s"
        label   "Texture 2"
        type    color
        size    3
        default { "1" "1" "1" }
        help    "The constant value of this texture. "
        range   { 0 1 }
    }
}
